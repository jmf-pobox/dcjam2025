[gd_scene load_steps=7 format=3 uid="uid://iyj11aj3t71d"]

[ext_resource type="Script" uid="uid://c32vkfmby6k3e" path="res://scripts/player/fp_player.gd" id="1_kgde3"]
[ext_resource type="Script" uid="uid://iws0fijjw00g" path="res://scripts/utils/dungeon_generator3d.gd" id="2_dungeon"]
[ext_resource type="Script" path="res://scripts/utils/debug_json_loader.gd" id="3_debug_json"]

[sub_resource type="GDScript" id="GDScript_level"]
script/source = "extends Node3D

@onready var player = $Player
@onready var debug_label = $CanvasLayer/DebugInfo
@onready var dungeon_generator = $DungeonGenerator3D

# Path to the dungeon JSON file
const DUNGEON_PATH = \"res://resources/dungeons/level_1.json\"

func _ready():
	# Wait for dungeon generator to be ready
	await get_tree().process_frame
	
	# Check if we're loading a saved game
	var game_manager = get_node(\"/root/GameManager\")
	var is_loading_save = game_manager and not game_manager.dungeon_data.is_empty()
	
	if is_loading_save:
		# Load saved dungeon state
		dungeon_generator.load_state()
		# Load saved player state
		player.load_state()
	else:
		# Load and generate the dungeon from JSON
		var success = dungeon_generator.load_from_json(DUNGEON_PATH)
		
		if not success:
			printerr(\"Failed to load dungeon from: \", DUNGEON_PATH)
			# Fall back to simple dungeon generation if JSON loading fails
			dungeon_generator.initialize()
			dungeon_generator.build_dungeon()
		
		# Find the entrance room from the dungeon data
		var entrance_pos = Vector2i(3, 3)  # Default position if no entrance found
		for room_id in dungeon_generator.rooms:
			var room = dungeon_generator.rooms[room_id]
			if room.type == \"entrance\":
				# Position the player in the center of the entrance room
				var pos = room.position
				var size = room.size
				entrance_pos = Vector2i(pos.x + size.x / 2, pos.y + size.y / 2)
				break
		
		# Position the player at the entrance
		player.grid_position = entrance_pos
		player.position = Vector3(
			player.grid_position.x * dungeon_generator.cell_size + dungeon_generator.cell_size / 2, 
			0.5, 
			player.grid_position.y * dungeon_generator.cell_size + dungeon_generator.cell_size / 2
		)
	
	# Debug info
	print(\"Dungeon loaded: \", \"Save\" if is_loading_save else \"New\")
	print(\"Player positioned at: \", player.position, \" grid pos: \", player.grid_position)
"

[sub_resource type="GDScript" id="GDScript_debug"]
script/source = "extends Label

@onready var player = $\"../../Player\"

func _process(_delta):
	text = \"Grid Position: (%d, %d)\\nFacing: %s\" % [player.grid_position.x, player.grid_position.y, _cardinal_to_string(player.facing_cardinal)]

func _cardinal_to_string(dir: int) -> String:
	match dir:
		0: return \"North\"
		1: return \"East\"
		2: return \"South\"
		3: return \"West\"
	return \"Unknown\"
"

[sub_resource type="GDScript" id="GDScript_pause"]
script/source = "extends Node

# Handle pausing the game
func _input(event):
	if event.is_action_pressed(\"pause\"):
		var pause_menu = load(\"res://scenes/ui/pause_menu.tscn\").instantiate()
		get_tree().root.add_child(pause_menu)
"

[node name="FPDungeon" type="Node3D"]
script = SubResource("GDScript_level")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, -0.75, 0.433013, 0, 5, 0)
light_energy = 1.2
shadow_enabled = true

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4, 0.8, 4)
light_color = Color(0.933333, 0.858824, 0.741176, 1)
light_energy = 0.8
shadow_enabled = true
omni_range = 10.0

[node name="DungeonGenerator3D" type="Node3D" parent="."]
script = ExtResource("2_dungeon")

[node name="JsonDebugger" type="Node" parent="."]
script = ExtResource("3_debug_json")

[node name="Player" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3, 0.5, 3)
script = ExtResource("1_kgde3")

[node name="Camera3D" type="Camera3D" parent="Player"]
current = true
fov = 70.0

[node name="RayCast3D" type="RayCast3D" parent="Player"]
target_position = Vector3(0, 0, -3)
collision_mask = 2
debug_shape_custom_color = Color(1, 0, 0, 1)
collide_with_areas = true
debug_shape_thickness = 5

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="DebugInfo" type="Label" parent="CanvasLayer"]
offset_left = 20.0
offset_top = 20.0
offset_right = 220.0
offset_bottom = 70.0
text = "Grid Position: (1, 1)
Facing: South"
script = SubResource("GDScript_debug")

[node name="PauseHandler" type="Node" parent="."]
process_mode = 3
script = SubResource("GDScript_pause")
